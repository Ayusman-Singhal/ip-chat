name: Deploy Documentation to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # Install minimal dependencies if requirements.txt is missing
            pip install flask eventlet
          fi
          pip install pdoc3

      - name: Generate documentation
        run: |
          # Create site directory - make sure we use consistent naming
          mkdir -p _site
          
          # Create simple documentation for the server
          echo "# IP Chat Server Documentation" > _site/index.md
          echo "" >> _site/index.md
          echo "## Overview" >> _site/index.md
          echo "This is the documentation for the IP Chat Server." >> _site/index.md
          echo "" >> _site/index.md
          
          # Document the server structure
          echo "## Server Structure" >> _site/index.md
          if [ -d "server" ]; then
            echo "Server directory found. Contents:" >> _site/index.md
            for file in $(find server -type f -name "*.py" | sort); do
              echo "- \`$file\`" >> _site/index.md
            done
          else
            echo "Server directory not found." >> _site/index.md
          fi
          
          # Add startup script info
          echo "" >> _site/index.md
          echo "## Startup Script" >> _site/index.md
          echo "The server is started using start.py, which sets up logging and initializes the server." >> _site/index.md
          echo "" >> _site/index.md
          echo "```python" >> _site/index.md
          cat start.py >> _site/index.md
          echo "```" >> _site/index.md
          
          # Try to generate API docs if possible
          if [ -d "server" ]; then
            echo "Generating API documentation..."
            mkdir -p _site/api
            pdoc --html --output-dir _site/api server || echo "Failed to generate API docs with pdoc"
            
            if [ -d "_site/api/server" ]; then
              echo "" >> _site/index.md
              echo "## API Documentation" >> _site/index.md
              echo "[View detailed API documentation](api/server/)" >> _site/index.md
            fi
          fi
          
          # Copy README if it exists
          if [ -f README.md ]; then
            cp README.md _site/readme.md
            echo "" >> _site/index.md
            echo "## README" >> _site/index.md
            echo "[View project README](readme.md)" >> _site/index.md
          fi
          
          # List files to verify
          ls -la _site/
          echo "Documentation generation complete."

      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
          
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
